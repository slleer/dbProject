Run/compilation
This project was implemented using python 3.8 on windows for ubuntu. To run the program, run dbms.py (on terminal: python3 dbms.py <optional_test_script.sql>) from the project folder. If you choose not to pass the test script as a command line argument, you can pipe the test script into the program once it is running (from terminal "python3 dbms.py" to run), “PIPE test_script.sql;”
Try typing “.help” while the program is running to see a simple manual for the database management system, including a list of additional commands that were implemented.

Transaction High-level design.
The implementation of the transaction was fairly straight forward. When a user begins a transaction, a transaction ID is created based on the time in seconds, to one tenth of a second, and stored as a variable. When a user, after beginning a transaction, attempts to modify a table, the program checks a log file for that table to see if there is a transaction ID associated with it. If there is no transaction ID associated with the table, the current user's transaction ID is added to the table log locking the table to any other user. When  a user attempts to modify a table that is currently locked by a transaction ID, if that user's transaction ID matches the ID in the log file, they are free to modify it, otherwise they are rejected from modifying the table. If a user attempts to modify a table without beginning a transaction, as long as that file is not currently locked by another user, then they are free to make changes without affecting the log file or locking the table. If a user makes changes to a table after beginning a transaction, those changes are not represented in the table until the user commits their transaction. This is handled by creating a temporary table, identical to the table being modified, and all changes to a table are first applied to the temporary table. Once a user commits their changes, the contents of the temporary file replace the contents of the original file and the temporary file is deleted. In addition to this functionality, the inclusion of the rollback command was implemented. This allows for more control when making changes to a table, as a user can call the rollback command and revert all modifications. This command is also helpful when someone exits the program mid transaction. If a user attempts to exit without committing their transaction, they will be prompted to continue to exit and revert all changes or abort the exit to commit changes and then exit.

General project information
The project works by creating directories for databases and files for the tables within a directory. When the program is running new databases will appear as folders within the dbProject\dbms folder. The program uses file path commands to ensure that the databases (folders) and tables (files) that are being manipulated by the program are only those within the same directory as the project files. This is to ensure that other files and directories do not get manipulated accidentally by the program. This version of the database management system implements an internal system that keeps track of each database and its respective tables, including table attribute names and types. This is used throughout the program for type verification and similar utility operations. The current version supports inserting, selecting, updating, deleting data from a given table and each of these commands (except insert) supports conditional statements. The program also supports inner and left outer join statements. Added to the program in this version is the inclusion of transaction functionality. With transaction functionality, a user can begin transactions and commit them. Beginning a transaction will ensure that each write method to a table can only be done through first locking that table to prevent other users from modifying data during the transaction and that all alterations only take effect when the transaction is committed. Rollback is not implemented in this version.


Thank you and enjoy using my program.


Stephen Leer


