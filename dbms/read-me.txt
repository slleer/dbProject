Run/compilation
This project was implemented using python 3.8 on windows for ubuntu. To run the program, run dbms.py (on terminal: python3 dbms.py <optional_test_script.sql>) from the project folder. If you choose not to pass the test script as a command line argument, you can pipe the test script into the program once it is running (from terminal "python3 dbms.py" to run), “PIPE test_script.sql;” 
Try typing “.help” while the program is running to see a simple manual for the database management system, including a list of additional commands that were implemented. 

Join statement high level
Added to this version of the program, join selection was implemented using a strategy design pattern. Each type of selection was written as its own class inheriting from the same abstract interface which enables the program to choose the correct selection object at runtime without the need for the selection logic to be overly crowded to accomidate multiple selections (w/o join, inner join, left outer join). In order to implement the join statements effectively, it seemed prudent to separate their individual functionalities, hence the use of the strategy design pattern. Having each join type, and basic selection, contain in its own class object allowed for singular focus during its implementation. Each of the join objects are based loosely off the basic selection statement frist implemented in project 1 and updated in project 2. Each join starts by identifying the tables specified in the statement and getting a reference to the cooresponding table ojbect held in memory. Next the conditional statement, used for identifying specific tuples, is parsed. After this step, the output is printed based on the specifications of the statement and the join type that was used. Additional to the implementation of the join feature, this version was updated to optimize performance on linux systems by removing case sensitivity for database directory and table file names. This change mirrors the performance on Windows machines, which already treat files/directories the same regardless of case.

General project information
The project works by creating directories for databases and files for the tables within a directory. When the program is running new databases will appear as folders within the dbProject\dbms folder. The program uses file path commands to ensure that the databases (folders) and tables (files) that are being manipulated by the program are only those within the same directory as the project files. This is to ensure that other files and directories do not get manipulated accidentally by the program. This version of the database management system implements an internal system that keeps track of each database and its respective tables, including table attribute names and types. This is used throughout the program for type verification and similar utility operations. The current version supports inserting, selecting, updating, deleting data from a given table and each of these commands (except insert) supports conditional statements. Added to this version of the program, join selection was implemented using a strategy design pattern. Each type of selection was written as its own class inheriting from the same abstract interface which enables the program to choose the correct selection object at runtime without the need for the selection logic to be overly crowded with redundant logics for each selection type (w/o join, inner join, left outer join). Additional to the implementation of the join feature, this version was updated to optimize performance on linux systems by removing case sensitivity for database directory and table file names. This change mirrors the performance on Windows machines, which already treat files/directories the same regardless of case.


Thank you and enjoy using my program.


Stephen Leer
