--------------------SleerDB USER MANUAL--------------------
SleerDB is a sqlite knock off that uses the host machine's
file system as the basis for a database management system.

-----------------------------------------------------------
                     Utility Commands
-----------------------------------------------------------
list database:                                    .database
- will list all databases -

list tables:                                         .table
- will list all tables for selected database -

exit program:                                         .exit
- will exit program -

display user manual:                                  .help
- displays this manual -

import file:                                pipe fileName;
- will import and execute statements from file fileName -

-----------------------------------------------------------
                    SQL-style Command
-----------------------------------------------------------
===========================================================
                  create database/table:
-----------------------------------------------------------
CREATE DATABASE databaseName;
CREATE TABLE tableName (n1 type, n2 type, ...);
-----------------------------------------------------------
- Database databaseName must first be selected before
    table creation is possible -
- type must be one of: char(size), varchar(size), float,
    int, bool -
- char and varchar type variables must be enclosed with
    single quotes, ex: 'example', the use of double
    quotes might result in unexpected behavior -
===========================================================
                    use database:
-----------------------------------------------------------
USE databaseName;
-----------------------------------------------------------
- will only select database if it has been created -
===========================================================
insert data into table:
-----------------------------------------------------------
INSERT INTO tableName VALUES(1, 'value2', 3.0, ...);
-----------------------------------------------------------
- tableName must be valid table -
- values must match expected type for table and column
    position -
- only one insertion at a time is possible at this time -
===========================================================
                select data from table:
-----------------------------------------------------------
SELECT columns FROM tableName;
-----------------------------------------------------------
- columns must be one or more column names associated with
    tableName -
- to select all columns associated with tableName, use the
    * character, without quotes, instead of specifying a
    column name -
===========================================================
                 add column to table:
-----------------------------------------------------------
ALTER TABLE tableName ADD name type;
-----------------------------------------------------------
- tableName must be a valid table -
- name is the name of the variable/column of table to add -
- type is the type of name -
- NOTE: at this time, there is no way to remove a column,
    instead you must create a new table and copy data to
    the new table from the one you wish to modify. -
===========================================================
                 delete a database/table:
-----------------------------------------------------------
DROP DATABASE databaseName;
DROP TABLE tableName;
-----------------------------------------------------------
- databaseName must be valid database -
- database must be selected to delete table -
- tableName must be valid table -
===========================================================
           update the values of a tuple in table
-----------------------------------------------------------
UPDATE tableName SET name = value WHERE column condition value;
                        EXAMPLE
UPDATE tb_1 SET p_name = 'tent' WHERE p_price <= 19.99;

UPDATE tb_1 SET p_name = 'tent', p_store = 'camping store'
     WHERE p_price <= 19.99 AND p_id != 6;
-----------------------------------------------------------
- tableName must be valid table -
- name is the column whose to replace with value. String
    values must be enclosed in single quotes only -
- column is the name of the variable to be compared against
    condition is the conditional statement (=, !=, <, >,
    <=, >=), and value is that value to be compared with
     the column -
- multiple columns can be updated in a single statement,
    use a comma, to separate them -
- multiple conditions can be used to check data, separate
    additional conditions with the word and -
===========================================================
              delete a tuple from a table:
-----------------------------------------------------------
DELETE FROM tableName WHERE column condition value;
                       EXAMPLE
DELETE FROM tb_1 WHERE p_price > 200.0;

DELETE FROM tb_1 WHERE p_price > 150.0 AND p_name = 'tent'
-----------------------------------------------------------
- column is the name of the variable to be compared against
    condition is the conditional statement (=, !=, <, >,
    <=, >=), and value is that value to be compared with
     the column -
- multiple conditions can be used to check data, separate
    additional conditions with the word AND -
===========================================================
                    join two Tables
-----------------------------------------------------------
SELECT * FROM tbl_a a, tbl_b b WHERE a.col condition b.col

SELECT * FROM t_a a INNER JOIN t_b b WHERE a.col condition b.col

SELECT * FROM tbl_a a JOIN tbl_b b WHERE a.col condition b.col

SELECT * FROM t_a a LEFT OUTER JOIN t_b b WHERE a.col condition b.col

___________________________________________________________
- tbl_a, t_a are the first table to join, and tbl_b, t_b are
    the second table
- a, b are variables chosen by user to identify which table
    the columns (col) should be selected from in the
    conditional statement (following the WHERE clause)
- condition can be any condition [=, <, >, ...] supported
    by the single table selection that makes sense for the
    given variable. I.E. >= not recommended for CHAR,
    VARCHAR, BOOL, and similar.
_ like the single table selection command, JOIN accepts
    individual table column selection, as well as all (*)
- LEFT OUTER JOIN will return all rows from left table as
    well as any matches found with the conditional statement
    in the right table.
_ INNER JOIN, JOIN, and comma separated tables all function
    the same way, returning only those rows from each table
    that satisfy the conditional statement (following WHERE
    clause)
==============================================================
                    begin transaction
--------------------------------------------------------------
BEGIN TRANSACTION;

--------------------------------------------------------------
- Creates and stores a transaction id unique to the user.
- With a transaction id, all modifications made to tables will
    lock the respective tables to modifications by other users.
- Modifications must be committed to take effect.
==============================================================
                           commit
--------------------------------------------------------------
COMMIT;

--------------------------------------------------------------
- All modifications made to tables during a transaction will be
    commited to the table and persisted to disk.
===============================================================
                          rollback
---------------------------------------------------------------
ROLLBACK;

---------------------------------------------------------------
- All modifications made to tables during a transaction will be
    aborted and lost.
---------------------------------------------------------------